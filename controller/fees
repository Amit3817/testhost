const User=require('../model/user');
const Institute=require("../model/institute")
const regex=require("../middleware/regex");

const form1=async (req,res)=>{
    try{
        const {iname,atype,rejected}=req.body
        if(!iname)
        {
            return res.json({success:false,msg:"Please enter the institute name"});   
        }
        if(!atype)
        {
            return res.json({success:false,msg:"Please enter the institute type"});   
        }
        if(!rejected)
        {
            return res.json({success:false,msg:"Please enter the rejected field"});   
        }
        if(regex.checkAbbreviation(iname)){
            return res.json({success:false,msg:"Institute name abbreviation cannot be 'IIM', 'IIT', 'IISc', 'NIT', 'IISER', 'IIIT', 'IIEST', 'AICTE', 'UGC', 'MoE', 'GoI'"});   
        }
        var uatype;
        if(atype=="i")
            uatype=="new"
        else
          uatype="old"
        const updated= await Institute.create({
                user:req.user._id,
                iname,
                atype:uatype,
                rejected
              });
            if(updated)
            {
               return res.json({success:true,msg:"Form1 submitted successfully",token:req.user.token});
            }
        
            return res.json({success:false,msg:"Institue name not added"});
        
        }
        catch(error){
            console.log(error);
            next(error);
         }

        
    }



const terOperationalExpense=async (req,res)=>{
    try{
    const {ter,oExpense}=req.body
    if(!ter)
    {
     return res.json({success:false,msg:"Please enter the option"});
    }
    if(!oExpense)
    {
     return res.json({success:false,msg:"Please enter the option"});
    }
    const institute=await Institute.findOne({user:req.user._id});
    var fees=institute.fees;
    var uter;
    var itype;
    var program=new Array();
    var uoExpense;

    if(ter=="i")
    {
      fees=fees+6.60
      uter=6.60
      itype="Government /Institution setup in J&K / Leh & Ladakh / North Eastern states/PwBD / Institution setup exclusively for women"

    }
    else if(ter=="ii")
    {
        uter=0;
        itype="Government/Government Aided Institutions/PPP mode"
    }
    else if(ter=="iii")
    {
        fees=fees+8.80
        uter=8.80;
        itype="All other institutions"
    }
    else if(ter=="iv")
    {
        fees=fees+2.20
        uter=2.20;
        itype="All Applicants under (i) and (iii) whose applications were rejected and issued Final LoR in the last academy year**"
    }

    for(var i=0;i<=oExpense.length;i++)
    {
    if(oExpense[i]==true)
    {
        if(i==0){
       fees=fees+100
       uoExpense=100,
       program.push("Engineering and technology")
        }
        else if(i==1)
        {
            fees=fees+50
            uoExpense=50
            program.push("Planing")
        }
        else if(i==2)
        {
            fees=fees+50
            uoExpense=50
            program.push("Applied Arts and Crafts")
        }
        else if(i==3)
        {
            fees=fees+50
            uoExpense=50
            program.push("Hotel Management and Catering Technology")
        }
        else if(i==4)
        {
            fees=fees+50
            uoExpense=50
            program.push("Computer Apllication (MCA)")
        }
        else if(i==5)
        {
            fees=fees+50
            uoExpense=50
            program.push("Management")
        }
        else if(i==6)
        {
            fees=fees+50
            uoExpense=50
            program.push("Planing")
        }
        else if(i==7)
        {
            fees=fees+50
            uoExpense=50
            program.push("Planing")
        }

    }
}
    programs=[...program]
    console.log(programs)

   const updated= await Institute.updateOne({user:req.user._id},{
    $set:{
       fees,
       ter:uter,
       oExpense:uoExpense,
       programs,
       itype
    }});
    if(updated)
    {
       return res.json({success:true,msg:"Ter updated",programs:program,token:req.user.token});
    }

    return res.json({success:false,msg:"Ter not recorded"});

}
catch(err0r){
    console.log(error);
    next(error);
 }
}

const security=async (req,res)=>{
    try{
        const {secDeposit}=req.body
        const institute=await Institute.findOne({user:req.user._id});
        var fees=institute.fees;
        var usDeposit=0

        function calcharge(i,j){
             if(j==0)
             return 12
            else if(j==1)
            {
                return 15
            }
            else if(j==2||j==4){
                if(i==0)
                return 28 
                else 
                return 12
            } 
            else if(j==3||j==5){
                if(i==0)
                return 35
                else
                return 15
            }
        }
        for(var i=0;i<7;i++)
        {
            for(var j=0;j<=5;j++)
            {
                if(secDeposit[i][j]==true)
                    {
                        usDeposit=calcharge(i,j)+usDeposit
                        fees=fees+usDeposit
                    }
            }
        }    
       const updated= await Institute.updateOne({User:req.user._id},{
        $set:{
           fees,
           sDeposit:usDeposit,
           datafull:true
        }});
        if(updated)
        {
           return res.json({success:true,msg:"Security fees updated",token:req.user.token});
        }
    
        return res.json({success:false,msg:"Security fees recorded"});
    
    }
    catch(err){
        console.log(error);
        next(error);
     }
}
module.exports={
    terOperationalExpense,
    security,form1

}